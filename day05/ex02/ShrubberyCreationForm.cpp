#include "ShrubberyCreationForm.hpp"


ShrubberyCreationForm::ShrubberyCreationForm() : AForm(NULL, 145, 137) {
	std::cout << "Default constructor SCF called" << std::endl;
}

ShrubberyCreationForm::ShrubberyCreationForm(std::string target) : AForm(target, 145, 137) {
	std::cout << "Custom constructor SCF called" << std::endl;
	_target = target;
}

ShrubberyCreationForm::ShrubberyCreationForm(const ShrubberyCreationForm& other) : AForm(other), _target(other._target) {
	std::cout << "Copy constructor SCF called" << std::endl;
}

ShrubberyCreationForm&	ShrubberyCreationForm::operator=(const ShrubberyCreationForm& other) {
	std::cout << "Copy assignment operator SCF called" << std::endl;
	AForm::operator=(other);
	_target = other._target;
	return *this;
}

ShrubberyCreationForm::~ShrubberyCreationForm() {
	std::cout << "Destructor SCF called" << std::endl;
}

void	ShrubberyCreationForm::executer(const Bureaucrat& chel) const {
    std::ofstream file;
	
	try {
		if (this->getSignet() == false)
			throw FormIsNotSignedException();
		else if (this->getGradeExecute() < chel.getGrade())
			throw GradeTooLowException();
		else {
			file.open("_shrubbery");
			if (!file.is_open()) {
				std::cerr << "File opening error" << std::endl;
				return;
			}
			file << "____________ ¶¶¶_______¶¶¶¶" << std::endl; 
			file << "__________¶¶¶¶¶¶¶¶¶¶__¶¶¶¶¶¶" << std::endl; 
			file << "_________ ¶¶____¶¶¶¶__¶¶__¶¶¶" << std::endl; 
			file << "_________¶¶¶¶¶¶¶___¶¶¶¶¶____¶¶¶¶¶¶¶¶¶¶¶¶¶¶" << std::endl; 
			file << "________¶¶__¶¶¶_____¶¶¶________¶_¶____¶¶¶¶¶" << std::endl; 
			file << "________¶¶_________________¶¶¶¶¶___¶¶¶¶¶__¶" << std::endl; 
			file << "________¶¶__________________¶¶¶¶___¶¶¶¶___¶" << std::endl; 
			file << "______¶__ ¶_________________¶¶¶___________¶¶" << std::endl; 
			file << "_____¶¶_¶¶¶_______________________________¶¶¶" << std::endl; 
			file << "_¶¶¶¶¶¶¶¶¶_________¶____________________¶__¶¶" << std::endl; 
			file << "¶¶¶¶___¶¶______¶¶¶¶¶______¶_¶¶¶_________¶¶¶¶¶¶¶" << std::endl; 
			file << "¶¶_______________¶¶_______¶¶¶¶______________¶¶¶¶" << std::endl; 
			file << "¶¶¶________________________¶¶_________________¶¶" << std::endl; 
			file << "_¶¶¶ _________________¶¶__________________¶____¶¶" << std::endl; 
			file << "__¶¶ _____¶________¶¶¶¶¶_______________¶¶¶¶¶___¶¶" << std::endl; 
			file << "__¶¶ __¶¶¶¶_________¶¶¶¶________________¶¶¶¶____¶¶" << std::endl; 
			file << "_¶¶___¶¶¶¶¶______________________________¶¶_____¶¶" << std::endl; 
			file << "¶¶¶_____¶¶_____¶¶¶_¶¶¶¶¶¶_¶¶¶¶_¶¶¶___¶¶________¶¶¶" << std::endl; 
			file << "¶¶ ______________¶_¶___¶¶__¶_¶_¶¶¶¶¶¶¶¶_______¶¶¶¶" << std::endl; 
			file << "¶¶¶_____¶¶¶¶¶¶¶¶___¶¶___¶_¶¶¶_¶¶_¶¶¶¶¶______¶¶¶¶" << std::endl; 
			file << "_¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶__¶¶__¶_¶¶¶¶¶____¶¶¶¶¶¶¶¶¶¶¶" << std::endl; 
			file << "___¶¶¶¶________¶¶¶¶¶_¶¶¶¶___¶¶______¶¶¶¶¶¶¶¶" << std::endl; 
			file << "_________________¶¶¶__¶¶¶_¶¶¶" << std::endl; 
			file << "__________________¶¶______¶¶" << std::endl; 
			file << "__________________¶¶__¶¶__¶¶¶¶¶¶¶¶¶¶" << std::endl; 
			file << "______________ ¶¶¶¶¶_¶¶¶¶_¶¶¶¶_¶¶¶¶¶¶¶¶" << std::endl; 
			file << "__________¶¶¶¶¶¶¶¶¶__¶¶___¶________¶¶¶¶¶¶¶¶¶¶" << std::endl; 
			file << "__¶¶¶¶¶¶¶¶¶¶¶¶ ___¶¶__¶___¶____________¶¶¶¶¶¶¶¶¶¶" << std::endl; 
			file << "¶¶¶¶¶¶¶¶¶¶_______¶¶¶______¶______________________" << std::endl; 
			file << "________________ ¶¶_______¶¶_____________________" << std::endl; 
			file << "________________¶¶________¶¶¶____________________" << std::endl; 
			file << "______________¶¶¶__¶¶¶¶__¶¶_¶J¶__________________" << std::endl; 
			file << "______________¶¶__¶¶__¶¶__¶__¶K¶________________" << std::endl; 
			file << "____________ ¶¶__¶¶____¶¶_¶___¶¶_________________" << std::endl; 
		}
	} catch (std::exception& e) {
		std::cout << e.what() << std::endl;
	}
}


// ____________ ¶¶¶_______¶¶¶¶
// __________¶¶¶¶¶¶¶¶¶¶__¶¶¶¶¶¶
// _________ ¶¶____¶¶¶¶__¶¶__¶¶¶
// _________¶¶¶¶¶¶¶___¶¶¶¶¶____¶¶¶¶¶¶¶¶¶¶¶¶¶¶
// ________¶¶__¶¶¶_____¶¶¶________¶_¶____¶¶¶¶¶
// ________¶¶_________________¶¶¶¶¶___¶¶¶¶¶__¶
// ________¶¶__________________¶¶¶¶___¶¶¶¶___¶
// ______¶__ ¶_________________¶¶¶___________¶¶
// _____¶¶_¶¶¶_______________________________¶¶¶
// _¶¶¶¶¶¶¶¶¶_________¶____________________¶__¶¶
// ¶¶¶¶___¶¶______¶¶¶¶¶______¶_¶¶¶_________¶¶¶¶¶¶¶
// ¶¶_______________¶¶_______¶¶¶¶______________¶¶¶¶
// ¶¶¶________________________¶¶_________________¶¶
// _¶¶¶ _________________¶¶__________________¶____¶¶
// __¶¶ _____¶________¶¶¶¶¶_______________¶¶¶¶¶___¶¶
// __¶¶ __¶¶¶¶_________¶¶¶¶________________¶¶¶¶____¶¶
// _¶¶___¶¶¶¶¶______________________________¶¶_____¶¶
// ¶¶¶_____¶¶_____¶¶¶_¶¶¶¶¶¶_¶¶¶¶_¶¶¶___¶¶________¶¶¶
// ¶¶ ______________¶_¶___¶¶__¶_¶_¶¶¶¶¶¶¶¶_______¶¶¶¶
// ¶¶¶_____¶¶¶¶¶¶¶¶___¶¶___¶_¶¶¶_¶¶_¶¶¶¶¶______¶¶¶¶
// _¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶__¶¶__¶_¶¶¶¶¶____¶¶¶¶¶¶¶¶¶¶¶
// ___¶¶¶¶________¶¶¶¶¶_¶¶¶¶___¶¶______¶¶¶¶¶¶¶¶
// _________________¶¶¶__¶¶¶_¶¶¶
// __________________¶¶______¶¶
// __________________¶¶__¶¶__¶¶¶¶¶¶¶¶¶¶
// ______________ ¶¶¶¶¶_¶¶¶¶_¶¶¶¶_¶¶¶¶¶¶¶¶
// __________¶¶¶¶¶¶¶¶¶__¶¶___¶________¶¶¶¶¶¶¶¶¶¶
// __¶¶¶¶¶¶¶¶¶¶¶¶ ___¶¶__¶___¶____________¶¶¶¶¶¶¶¶¶¶
// ¶¶¶¶¶¶¶¶¶¶_______¶¶¶______¶______________________
// ________________ ¶¶_______¶¶_____________________
// ________________¶¶________¶¶¶____________________
// ______________¶¶¶__¶¶¶¶__¶¶_¶J¶__________________
// ______________¶¶__¶¶__¶¶__¶__¶K¶________________
// ____________ ¶¶__¶¶____¶¶_¶___¶¶_________________